=====================================================================
                        MPCore依存部マニュアル
                                  Last Modified:2017 Apr 19 09:33:31
=====================================================================

○概要

MPCore依存部は，ARM社のMPCoreをターゲットとしている．現状は
ARM11MPCore/CA9/CA7のみをサポートしている．


○カーネルの使用リソース

プロセッサ毎にカーネルは以下のリソースを使用する．

●コア内蔵タイマ

カーネルのティックとして用いる．

●0番のプロセッサ間割込み

GICの割込み番号0のプロセッサ間割込みをプロセッサ間のディスパッチ要求の
ために用いる．ディスパッチ用のプロセッサ間割込みハンドラのバイパス処理
を用いる場合には，GICの割込み番号1のプロセッサ間割込みも使用する．

●SCUカウンタMN0

性能評価用にSCUカウンタのMN0を用いる．


○割込み処理関係

割込みはGICを用いて扱う．

●割込みハンドラ番号と割込み番号

GICで割付けられている番号を割込みハンドラ番号及び割込み番号とする．コ
アに割り付けられるローカルな割込みに関しては，上位ビットで割り付けられ
ているコアのビットを入れることで，識別する．グローバルな割込みは，上位
ビットが0xfとなっている．

●割込み優先度の最小値と最大値

割込み優先度の最小値は-15であり，最大値は-1である．

●dis_int/ena_int のサポート

dis_int/ena_intをサポートしている．

●カーネル管理外の割込みサポート

カーネル管理外の割込みはサポートしていない．

●ATT_ISRの割付クラスの制限

ハードウェア的に全プロセッサにも割り付け可能な割込み（割込み番号の上位
16ビットが0）に対するATT_ISRは，割り付け可能プロセッサが初期割付けプロ
セッサのみのクラスに割り付け可能である．

○性能評価用システム時刻の参照

コア内蔵タイマによる get_utm をサポートしている．


○チップ依存のマスタプロセッサ用初期化ルーチン

カーネル起動時に str_ker() の実行前に呼び出されるルーチンとして，
chip_mprc_initialize() があり，以下の初期化を行う．

●GICの初期化

GICを一旦無効にして，全ての割込みを禁止した上で，ペンディングビットを
クリアした後，有効にする．

●SCUの初期化

SCUを有効にして，全てのコアのモードをNORMALとする．

●SILのスピンロック用変数の初期化

SILのスピンロック関数を有効にするため，スピンロック変数を有効にする．


○チップ依存の初期化ルーチン

チップ依存の初期化ルーチンとして，chip_initialize()があり，以下の初期
化を行う．

●Thread ID レジスタの初期化

自プロセッサのPCBへのポインタを設定する．

●ARM依存部の初期化ルーチンの呼び出し

ARM依存部の初期化ルーチンである，core_initialize()を呼び出す．

●MMUの初期化

MMUを初期化して，ページテーブルを以下の設定で1つ作成する．

  ・全セクションを物理アドレス = 仮想アドレス
  ・ノンキャッシャブル，ノンバッファブルとする

●SMPモードに設定する

キャッシュとTLVをクリアした後，プロセッサをSMPモードとする．

●キャッシュを有効に

IキャッシュとDキャッシュの両方を有効にする．

●GICのCPUインタフェースを有効に

プロセッサの割込み優先度を最低優先度とし，割込み優先度の全ビットを有効
にして，EOIによりペンディングしている割込みをクリアする．


○チップ依存の終了処理ルーチン

チップ依存の初期化ルーチンであるchip_exit()では，以下の終了処理を行う．

●ARM依存部の終了処理ルーチンの呼び出し

ARM依存部の終了処理ルーチンである，core_exit()を呼び出す．

●GICのCPUインタフェースを停止する

●GICのDISインタフェースの停止


○性能評価用カウンタ用ルーチン

プロセッサを跨ぐ時間を計測するために，SCUのMN0カウンタを用いた計測ルー
チンを用意している．カウントはCPUクロックで行われる．

  void scu_counter_init(void); //カウンターの初期化

  void scu_counter_reset(void) //カウンター値のリセット

  void scu_counter_get_current(void) //カウンター値の取得


○SIL関連

MPCore依存部では，SILのスピンロック取得・解放ルーチンを提供する．スピ
ンロックで用いる変数は，チップ依存のマスタプロセッサ用初期化ルーチン
（chip_mprc_initialize()）で初期化している．

○FPU

ARM APCS プロシジャコールスタンダード
レジスタ s0-s15 (d0-d7, q0-q3)  ： サブルーチンコール間で保存不要
                                   引数、戻り値等で使用、サブルーチンコールでスクラッチされるレジスタ
レジスタ s16-s31 (d8-d15, q4-q7)： サブルーチンコール間で保存が必要
レジスタ d16-d31 (q8-q15)       ： サブルーチンコール間で保存が必要
     
=====================================================================
                ターゲット依存部開発者向けの情報
=====================================================================
○マスタプロセッサの指定

マスタプロセッサのプロセッサIDを次のマクロで指定する．

  TMPRC_INDEX

○コア内蔵ペリフェラルのベースアドレスを次のマクロで指定する．

  MPCORE_PMR_BASE

○chip_mprc_initialize()の呼び出し

target_mprc_initialize()からの呼び出すこと．

○chip_initialize()の呼び出し

target_initialize()からの呼び出すこと．

○タイマ関連の定義

各コアのプライベートタイマを使用する時は以下のマクロを定義すること．

 MPCORE_TM_LOAD_1MS  : 1msec周期を生成するためのロード値
 MPCORE_TM_PS_1MS    : 1msec周期を生成するためのプリスケーラ値

○性能評価用関数の定義

CA9/MPCore の r1以降に搭載されている Global Timer を使用する．

以下のマクロを定義すること．

 MPCORE_GTC_CLOCK_FREQ_MHZ : Global Timer の動作周波数

○TrustZoneのサポート

SafeGを用いてSecure/NonSecure側で実行するコンフィギュレーションをサポ
ートする．この機能を有効にするには，以下のマクロを定義すること．

 TOPPERS_SAFEG_SECURE : TrustZoneのSecure側で実行
 TOPPERS_SAFEG_NONSECURE : TrustZoneのNonSecure側で実行
 
Secure/NonSecureがそれぞれのプロセッサで何%動作したか(負荷)を計測する
機能を提供する．本機能を使用する場合には，以下のマクロを有効にし，
./syssvc/safeg_load.c をビルド対象とするこ．

 TOPPERS_SAFEG_LOAD
 
使用方法は，まず各コアで初期化関数 safeg_load_init() を呼び出す．次に
safeg_syscall_switch()を呼び出してNonSecure側に移行する直前に
safeg_load_idle()を呼び出す．なお，これらの関数の呼び出しはアトミック
に行う必要があるため，次のようにSILロック状態で呼び出すこと．

    SIL_PRE_LOC;
    SIL_LOC_INT();
    safeg_load_idle();
    ret = safeg_syscall_switch();
    SIL_UNL_INT();
    
OSのアイドル処理によりNonSecure側に移行する場合は特にユーザーで記述す
る必要はない．

負荷は次の関数で取得可能である．

 safeg_load_info(ID prcid, uint32_t *p_trust_load, uint32_t *p_nontrust_load)
    
また，safeg_load_init() を呼び出すと，それまでの履歴は捨て，改めて負荷
の計測を開始する．

○ディフォルトのIDLE処理

ディフォルトのIDLE処理として，wfiによるIDLE処理を用意している．この処
理以外の処理を行う場合は，ターゲット依存部でアセンブラマクロ
(toppers_asm_custom_idle)を定義して，以下のマクロを定義すること．

 TOPPRS_NONUSE_CHIP_DEFAULT_CUSTOM_IDLE : MPCore依存部のディフォルトの
                                          IDLE処理を無効に

○GICによるCPUロック

SafeGを用いてSecure側で実行する際は通常はcpsrのFビットで割込みの禁止を
実現するが，NMFI が有効となっていると，Fビットはセットできない．そのた
め，GICの優先度マスクをCPUロックとして使用する機能を提供する．この機能
を有効をするためには，以下のマクロを定義すること．

 USE_GIC_CPULOCK : CPUロックとしてGICの優先度マスクを使用．
 ENABLE_NMFI     : NMFI対応コード

本機能を有効とした場合，次の制約がある．

 ・多重割込みはサポートしていない．
 ・割込みからリターンと割込みの許可がアトミックに出来ないため，タスク
   スタック1段分余分に必要な場合がある．      


=====================================================================
                             変更履歴
=====================================================================
2017/04/19
・Makefile.chip
  /common/gic_kernel.csv をCFG_TABSに指定．
  
2017/02/18
・chip_wdt.cfg
  3,4コア用の記述の追加．
  
2016/09/09
・mpcore.c
  enable_sa()のv8向けのコードの不具合修正．

2016/07/18
・MPCore依存部にあった記述のうち，ARMv6/ARMv7の仕様として定義されてい
  る機能をARM依存部に移動．
・Generic Timerに対するコードをARM依存部に移動．
・GICに関するコードをARM依存部に移動．

2016/07/08
・CA7対応．
・キャッシュ操作をキャッシュ情報レジスタを参照してLv7まで対応するよう
  に変更．
・グローバルタイマ対応

2016/06/14
・2016/03/09の変更ではDEF_INH()で登録された割込みに対応していなかったた
  め修正．

2016/03/17
・アセンブラからC言語を呼び出す際にはスタックが8バイト境界となるよう調
  整．
・起動時にブランチプリディクターの初期化を実施するよう変更．
  
2016/03/09
・割込みハンドラ及びサービスルーチンが登録されたコア以外からも
  ena_int()/dis_int()可能なように，割込み属性アクセステーブルをプライ
  ベート割込みとグローバル割込みに分けて用意するよう変更

2016/02/04
・mpcore.h
  mpcore_icache_invalidate()
   無効後にブランチヒストリをクリア，DSB，プリフェッチバッファのクリアを追加  
・mpcore.c  
   mpcore_dcache_disable()
    無効前にL1とL2をフラッシュ&Invalidate
   mpcore_cache_disable()
    Iキャッシュから無効化．
   
2015/09/01
・mpcore.h/mpcore.c
  コア2以降は分岐予測が有効となっていなかったため，Iキャッシュの有効化
  と共に有効とする．

2015/08/25
・chip_gtimer.h
  4コアまでに対応．
  
2015/07/07
・chip_gtimer.h
  Global Timerのtarget_timer_get_current()を修正．
・chip_support.S
  SafeG使用時にTrustとNon-Trustの負荷を取得する機能の追加．  
  TOPPERS_SAFEG_LOADによりON/OFF可能．

2015/06/30
・Global Timerをシステムタイマーとしてサポート
  ・SafeG使用時はNon-Secure側はGlobal Timerを操作できないよう変更．

2015/02/10
・SafeGを有効時に割込み優先度の範囲をtfでチェックするよう変更．

2015/01/28
・FPU(VFPv3 NEONN)のサポート．

2014/12/24
・mpcore.h/mpcore.c
  ARMv7では，SMPボードを有効にする際にFWビットをセットしてTLB/cacheの
  メインテナンスコードをコア間でブロードキャストするように修正．
  
2014/12/24
・chip_support.S
  release_lockにおいてPCB.p_sencondlockのNULL判定後にジャンプコードが
  入っていない問題を修正．

2014/10/03
・mpcore.h
  dic_cpu_set_priority() 優先度変更後，優先度が反映されるまで待つよう
  バリア名を追加．
    
2013/11/29
・cpsrではなく，GICの割込み優先度マスクでCPUロックを実現する機能を追加．
  USE_GIC_CPULOCK により切り替える．
・NMFIが有効な場合をサポートする ENABLE_NMFI を追加．
  
2013/10/05
・MMUが有効な状態で起動しても動作するよう，MMUの無効化とTLBの無効処理
  を起動処理として追加．

2013/08/21
・chip_asm.inc
  TOPPERS_ENABLE_QEMU を定義した場合は，toppers_custom_idle で wfiを無
  効にする．
・chip_config.c
  CP15_SET_VBAR()の有効・無効を OMIT_VBAR_SETUP で制御するように変更．
・mpcore.h
  mpcore_dcache_clean() を追加
・mpcore_tool.h
  CP15_DCACHE_CLEAN(x) を追加．
  

2013/07/11
・内蔵WDT用のドライバの追加(chip_wdt.c/h/cfg)
・ARMv7ではMMUの設定時にnsビットを設定するように変更．
・HIVECを設定する関数の追加．
・割込みセキュリティの設定を割込みが32で割り切れない場合でも正しく設定
  可能なように変更．
 
2012/10/30
・USE_IPI_DIS_HANDER_BYPASS 有効時に使用するIPIの番号を指定するマクロ
  を誤っていた問題を修正．

2012/10/19
・プライベートタイマのロード値をマクロ設定可能に．
・プリスケーラ値のマクロ名を変更．
・上記の変更に伴い，グローバルタイマ用クロック周波数のマクロを
  MPCORE_GTC_CLOCK_FREQ_MHZに変更．
・x_conv_nsec()の戻り値をuint64_tに変更．
・性能評価用関数として，CA9/MPCore の r1以降に搭載されている Global
  Timer を使用する．
・割込みコントローラのコア毎のSGI/PPIのレジスタの初期化を追加
・ディフォルトのIDLE処理の無効マクロを追加．
・TrustZoneサポート
・ip(r11)レジスタを単に一般レジスタとして使用する場合はr11と書くよう変
  更．
・性能評価（ブート時間，割込み応答性）の計測ルーチンの追加．


2012/04/28
・MMU処理の最適化．
・MMUのマップは全てターゲット依存部で実施するよう変更．

2012/04/03
・irq_handlerでのcpsrの設定の修正
  ・CPSR_CPULOCK と CPSR_ALWAYS_SET をセットするように修正．

2012/03/30
・ext_ker_request()へのウェイトの追加
  ・ARMCCでは割込みを受け付けないプロセッサ発生する．GCCと比較してコー
    ドが効率的で早いための思われる．ループを追加して調整（スマートでは
    ない）．

2012/01/13
・ARMCC対応のための変更．

2011/07/15
・ARMv7時のBinary Point Regiset の設定値の修正
  ・ARMv6とはビットのアサインが変更されていおり，これまでは上位4bitの
    みが比較に用いられていたため，5bit全体を比較するように変更．

2011/07/12
・chip_support.S におけるEOI書き込み値の修正
  ・割込み発生時にIARから取得した値の下位10bitを書き込んでいたが，プロ
    セッサ間割込みの場合は，割込み要求がクリアされない場合があるため，
    IARから読み込んだそのままの値（ソースCPU情報がある）をEOIに書き込
    むように変更．
  ・この修正により，3コア以上のNaviEngineで発生していた，Spurious割込
    みの問題も解決した．
・chip.tf における割込み関連の記述の変更
  ・INHNO_ATTISR_VALID におけるグローバルな割込み要求ラインに対する割
    込みハンドラ番号の扱いの変更により，chip.tf に以下の変更を実施．
    ・INTNO_ATTISR_VALID/INHNO_ATTISR_VALID をターゲット依存部に移動

2011/05/03
・ASP 1.7.0 への追従．
  ・オフセットファイルの生成方法をコンフィギュレータを用いる方法に変更．

2011/02/17
・割込みハンドラ（irq_handler）において，Spurious Interrupt 時にスタッ
  クポイントの復帰コードへ分岐するようになっていたが，スタックの保存や
  ネストカウントの更新は行っていないため，ret_int2にリターンするように
  修正．
・CA9（ARMv7）と同様にARM11MPcore（ARMv6）でもSpurious Interrupt が発
  生するため，ARM11MPcoreでもSpurious Interrupt対応のコードを有効とする．

2011/02/16
・カーネル管理外のCPU例外の出入口処理で，システム状態（コンテキストは
  除く）を，CPU例外発生時の状態へ変更する際に正しいアドレスからCPU例外
  発生前のCPSRを取得していなかった問題を修正．

2010/11/02
・起動時の同期方法を変更．
  デバッガを使う場合，sev/wevが使用できないことに加え，前の実行のメモ
  リが残っているため正しく同期できない場合があった．同期用の変数をコア
  毎に持ち，同期後に初期化するように変更．
・CA9で発生するspurious割込み対応

2010/10/14
・TOPPERS_SYSTIM_PRCID の定義で使用する割込みハンドラを変更するように
  変更．

2010/08/06
・共通部 1.2 追従．

2010/06/02
・テストプログラム関連のコードの削除．

2010/04/21
・プロセッサ3/4用のタイマの割込み番号の上位ビットをプロセッサIDのマス
  クからプロセッサIDに修正．

2010/02/26
・Coretex-A9 MPCore のサポート
  __TARGET_ARCH_ARM マクロで切り替え．

2010/02/16
・グローバルタイマ方式時にタイマ割込みをTCL_ADMIN_PRC（クラスID 5）に
  属するように変更．

2010/01/27
・ロック変数の型(LOCK)の定義をtypedefに変更．
・スピンロックの型(SPNLOCK)の定義をtypedefに変更．

2009/11/27
・スピンロック失敗時に割込みを許可してwfeを実行するように変更．

2009/11/20
・スタートアップルーチンでマスタプロセッサをTOPPERS_MASTER_PRCIDを見て
  判定するように変更．

2009/11/11
・start.Sの追加．ARM標準のsart.Sとは異なり，同期時にsev,wfeを使用する．

2009/11/03
・SIL_LOC_SPNの仕様を変更．
  ロック取得を待つ間は，割込みをマスクしないように変更．

2009/10/16
・アセンブラファイル中の分岐命令を AAPCS推奨に変更．
  mov pc, xx -> bx pc

2009/10/05
 dic_config/dic_set_target/dic_set_priority内でプロセッサ間の排他の実施

2009/09/15
 ディスパッチ用のプロセッサ間割込みハンドラのバイパス処理のサポート
 1.1.0の追従のための変更．
 自プロセッサのPCBへのアクセスを効率化するため，PCBへのポインタを
 Thread ID レジスタへ格納．

2009/07/14
 CPUEXC3 と CPUEXC4 を修正．
 サンプルプログラム用の定義（CPUEXC1...） をターゲット依存部に異動

2009/05/14
 INTHDR_ENTRY() でextern宣言を出力しないように変更．

2009/02/03
 マニュアルの整備．

2009/01/26
 共通部とのインタフェースの変更により，関数名を変更．

2008/09/11
 CP15_DATA_SYNC_BARRIER()/CP15_INVALIDATE_UNIFIED_TLB() : mpcore.h
   インラインアセンブラマクロを修正．

2008/08/04
 x_config_int() : chip_config.c
   ローカル割込みの場合，割込み対処プロセッサに自プロセッサが含まれて
   いるかチェックする．

以上．
